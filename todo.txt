



* 25-01-25

Notes 

The agent needs to be able to do the following shit:
- See the current pokemon: moves, type, hp, etc 

+ Remove ALL AI related code 
+ Write code for testing each endpoint after authorised  (Do this in a loop)


* 26-01-25

Reasoning Steps: 
- I need to be able to see all of my pokemon
- I need to see if my pokemons type is good against the opponent
  - How deep do we go? ... keep it high level to start
- I need to know what moves my pokemon has and the types, to see if they work well
  - Do we do this in one step? 
- I need to see the status effects or if they are fainted 


+ Write hardcoded flow to mimic LLM 
+ Note down what reasoning steps are required for analysis
+ Implement Analysis Agent
+ Implement Battle Agent
+ Implement Reasoning Agent


* 27-01-25

Write abstraction for calling endpoints
- not sure if useful 

Manage state through:
- Passing the previous choices 
- Passing the previous moves in battle 

Track enemies status effects
Track enemies moves 
Track enemies abilities 

* 29-03-25

Where does all the time go? 

+ Implement langgraph state passing 
- Put battle data into the state


* 23-03-25
+ Track history 

* 23-04-25
+ Pass correct data to the agent about opponent (type weakness)
also fixed a few promppting bugs 

- Manage pokemon forms 
  - Could send the request to the dex api or seperately with some logic
- fix weird bug in analysis agent where they write 2 sentences

* Problematic API Calls
Unown-M
Furfrou-Pharaoh
Rotom-Mow
Vivillon-Polar
Rotom-Wash
Rotom-Heat
Rotom-Frost
Rotom-Fan

- 1.5x bonus if you use a same type attack bonus 

